---
title: "Project 1"
output: html_document
date: "2023-02-18"
---

```{r setup, include=FALSE}
file1beer=read.csv(file.choose(),header=TRUE)  #loading first data
file2brewery=read.csv(file.choose(),header=TRUE) #loading second data
all=full_join(file1beer,file2brewery,by =c("Brewery_id"="Brew_ID")) #full join them together

```

```{r}
# count how many brewery are present in each state
library(usmap)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(stringr)
library(caret)
library(e1071)

brewerybystate=table(file2brewery$State)
brewerybystate= data.frame(brewerybystate)
colnames(brewerybystate)[1]="state"
brewerybystate$Freq=as.double(brewerybystate$Freq)
brewerybystate$state=as.character(brewerybystate$state)
all$State=str_replace_all(all$State," ","")
brewerybystate$state=str_replace_all(brewerybystate$state," ","")


#using raw data to create a data set contains, state and freq and lot it with US map

plot_usmap(data = brewerybystate, regions = "state", values = "Freq", color = "#56B4E9",labels = TRUE,label_color = "#009E73") + 
  scale_fill_continuous(
    low = "white", high = "#56B4E9", name = "Number of Brewery", label = scales::comma
  ) + theme(legend.position = "right")



usmap::plot_usmap("state", include = c("CO", "KY", "IN","NY"),  color = "#56B4E9",labels = TRUE,label_color = "#009E73")



```

```{r}
#address missing values
str(all)
#calculating IBU with average value
all %>%
  drop_na(IBU) %>%
  summarise(mean(IBU)) 
# replace all na value with average IBU
 all$IBU=replace_na(all$IBU,43)
 
 all%>%
   drop_na(ABV) %>%
   summarize(mean(ABV))
 
 all$ABV=replace_na(all$ABV,0.05977342)
   
 
 
  

```

```{R}
#calculating median alcohol content



alls=all %>%
  group_by(State) %>% #group by state
  summarise(median_ABV = median(ABV), median_IBU = median(IBU)) #calculate median


ggplot(alls, aes(x = State, y = median_ABV, fill = median_IBU)) + #use ggplot to plot the chart
  geom_col() +
  ggtitle("Median ABV and IBU by State") +
  xlab("State") +
  ylab("Median ABV") +
  scale_fill_gradient(low = "blue", high = "red", name="Median IBU") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))


```

```{R}
#calculating Max ABV and IBU in each state
str(all)

TopABV=tail(all[order(all$ABV),]) #CO has the most alcohol content 	Lee Hill Series Vol. 5 - Belgian Style Quadruple Ale
colnames(TopABV)[10]="state"

TopIBU=tail(all[order(all$IBU),]) #OR has the most bitter beer American Double / Imperial IPA

colnames(TopIBU)[10]="state"
#-----------------------------------------------
#plot top 5 state that has the most ABV beer
plot_usmap(data = TopABV, regions = "state", include = c("CO", "KY", "IN","NY"), values = "ABV", color = "#56B4E9",labels = TRUE,label_color = "#009E73") + 
  scale_fill_continuous(
    low = "white", high = "#56B4E9", name = "Maximum Alcoholic (ABV)", label = scales::comma
  ) + theme(legend.position = "right")

#-----------------------------------------------
#plot top 5 state with most IBU beer
plot_usmap(data = TopIBU, regions = "state", include = c("OR", "VA", "MA","OH","VT"), values = "ABV", color = "#56B4E9",labels = TRUE,label_color = "#009E73") + 
  scale_fill_continuous(
    low = "white", high = "#56B4E9", name = "Most Bitter (IBU)", label = scales::comma
  ) + theme(legend.position = "right")

```


```{r}
#Comment on the summary statistics and distribution of the ABV variable.

library(GGally)
summary(all)

all$Category=as.factor(all$Category)
class(all$Category)

all%>%
  select(IBU,ABV,Category)%>%
  ggpairs(aes(color=Category))

mpg



#ABV has a left screwed distribution.
 
```

```{r}
all %>%
  ggplot(aes(x=IBU,y=ABV))+geom_point()+geom_smooth()+
  ggtitle("Relationship between IBU and ABV")+
  ggthemes::theme_economist()

```


```{r}
allbeer=all %>%
  group_by(Beer_ID)

all$Category=Category  #creating a category
  
indexIPA=grep("IPA",all$Name.x) #classify all IPA as IPA
IPA=all[indexIPA,]
all[indexIPA,"Category"]="IPA"


indexAle=grep("Ale",all$Name.x) #classify all Ale as Ale
Ale=all[indexAle,]
all[indexAle,"Category"]="Ale"

IPAandAle=all %>%
  filter(Category=="IPA" |Category== "Ale")

classification=knn.cv(IPAandAle[c(3,4)],IPAandAle$Category,k=3) #find out max accuracy
confusionMatrix(table(classification,IPAandAle$Category))


MaxAccuracy=numeric(100) #find out max accuracy

for (i in 1:100){
  classification=knn.cv(IPAandAle[c(3,4)],IPAandAle$Category,k=i)
  CM=confusionMatrix(table(classification,IPAandAle$Category))
  MaxAccuracy[i]=CM$overall[1]
}

plot(MaxAccuracy) #find out max accuracy

#accuracy is the highest when k =3, use k=3 as classification 

classification=knn.cv(IPAandAle[c(3,4)],IPAandAle$Category,k=3) #find out max accuracy
confusionMatrix(table(classification,IPAandAle$Category))

ggplot(IPAandAle,aes(x=IBU,y=ABV,color=Category))+geom_point()+ggthemes::theme_economist()



#Cleaning ABV using mean
df_beers_cl0 = df_beers
nr_mean_abv = mean(df_beers_cl0[!is.na(df_beers_cl0$ABV),]$ABV) #Calculate the mean
length_abv = length(df_beers_cl0[is.na(df_beers_cl0$ABV),]$ABV) 
if(length_abv > 0){
  df_beers_cl0[is.na(df_beers_cl0$ABV),]$ABV = nr_mean_abv      #Replacing MS
}


```


